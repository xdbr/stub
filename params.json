{"name":"Stub","tagline":"A language-agnostic project generator","body":"stub\r\n====\r\n\r\nstunningly simple & stupid language agnostic project generator\r\n\r\nWith *stub*, you can create new projects instantly and have the most essential parts renamed and substituted.\r\n\r\nLikewise, you can use *stub* to create new classes inside existsing projects in a second.\r\n\r\n## Example\r\n\r\n* Stub-template example:\r\n\r\n    `https://github.com/xdbr/stub-template-typesetting`\r\n\r\n* Project generated / substitutions made:\r\n\r\n<!--  -->\r\n\r\n    .                                           .--------[ main.pandoc ] --------------.\r\n    |-- README.md                               | % {{head1}}   <-- these will         |\r\n    |-- Rakefile                                | % {{head2}}   <-- be stubstituted    |\r\n    |-- bibliography.bib                        | % {{head3}}   <-- by stub            |\r\n    |-- chapters                                |                                      |\r\n    |   |-- 100-Introduction.pandoc             | <#include resources/gpp-defines.gpp> |\r\n    |   |-- 200-Examples.pandoc                 |                                      |\r\n    |   `-- 900-End.pandoc                      | <#part Part I>                       |\r\n    |-- main.pandoc  ---D E T A I L  V I E W--->|                                      |\r\n    |-- project.json                            | # Introduction                       |\r\n    `-- resources                               |                                      |\r\n        |-- ditaa                               | [...]                                |\r\n        |   `-- typesetting-process.ditaa       |                                      |\r\n        `-- gpp-defines.gpp                     '--------------------------------------'\r\n<!--  -->\r\n\r\n* Command used\r\n\r\n    `stub template:new template=https://github.com/xdbr/stub-template-typesetting to=destinaton-dir head1=foobar`\r\n\r\n## Installation\r\nRun\r\n    \r\n    curl --silent https://raw.github.com/xdbr/stub/master/install.sh | $SHELL\r\n\r\n...and follow the instructions\r\n\r\n## Usage\r\n\r\n### Stubbing out a project\r\n\r\n    stub template:new template=TEMPLATE-NAME to=DESTINATION_DIR variable1=value1 variable2=value2 ...\r\n\r\n    stub template:new template=http://path/to/repo.git to=DESTINATION_DIR variable1=value1 variable2=value2 ...\r\n\r\n#### Finding out about variables that need to be set / optionally can be set\r\n\r\n    stub template:info template=TEMPLATE-NAME-or-path-to-repo\r\n\r\n\r\n## Creating projects stubs\r\nCreating a project stub to be reused is straightforward and simple. Here's a quick rundown:\r\n\r\n### Defining a project stub\r\n\r\n1. Generate your skeleton of how you want your files and folders to be layed out\r\n2. substitute all variables with mustaches that you liked to be filled in, e.g. `class {{classname}}`. This will be set by using `stub project new template=yourtemplatename classname=foo`\r\n3. write a file `project.json`, put it in the top directory of your skeleton.\r\n4. Use the following layout for your `project.json`:\r\n\r\n```\r\n    {\r\n      \"requires\": {\r\n        \"name\"   : \"string\",\r\n        \"version\": \"versionstring\"\r\n      },\r\n      \"optional\": {\r\n        \"author\": \"Quux\"\r\n      }\r\n    }\r\n```\r\n\r\nNote that:\r\n\r\na) in this example, the variables `name` and `version` will be required upon using this stub\r\nb) the optional variables *can* be set (name=\"me\") or their default values will be used (\"Quux\")\r\nc) the definitions `string` and `versionstring` only carry an informative value, but will not be validated\r\n\r\n## More Usage\r\n\r\n### Finding all tasks\r\n\r\n    stub -T\r\n    stub --tasks\r\n\r\n### Listing all templates\r\n\r\n    stub template:list\r\n\r\n## Author\r\n\r\nDaniel <dbrx@crux.uberspace.de>\r\n\r\n## License\r\n\r\nWTFPL","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}